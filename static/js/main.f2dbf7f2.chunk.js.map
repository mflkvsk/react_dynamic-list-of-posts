{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","getPost","selectedPost","className","map","post","userId","title","type","onClick","id","BASE_URL","request","url","a","options","undefined","fetch","response","ok","Error","json","loadComments","postId","removeComment","method","addComment","name","email","body","headers","JSON","stringify","loadPost","NewCommentForm","createComment","useState","setName","setEmail","setBody","value","onChange","event","target","placeholder","preventDefault","PostDetails","comments","setComments","setPost","isComments","setIsComments","deleteComment","commentsFromServer","useEffect","getPostDetails","Promise","all","postFromServer","addNewComment","buttonName","length","comment","App","users","setUsers","setPosts","selectedUserId","setSelectedUserId","setSelectedPost","getUsers","usersFromServer","loadUserPosts","userPostsFromServer","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2dbf7f2.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  getPost: (id: number) => void,\n  selectedPost: number,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  getPost,\n  selectedPost,\n}) => {\n  const handleClick = (id: number) => {\n    if (selectedPost !== id) {\n      getPost(id);\n    } else {\n      getPost(0);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul\n        className=\"PostsList__list\"\n        data-cy=\"postDetails\"\n      >\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>\n                {`[User #${post.userId}]: `}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleClick(post.id)}\n            >\n              {(selectedPost === post.id)\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// eslint-disable-next-line max-len\nexport const request = async (url: string, options: {} | undefined = undefined) => {\n  const response = await fetch(`${BASE_URL}/${url}`, options);\n\n  if (!response.ok) {\n    throw new Error('Failed to load posts');\n  }\n\n  return response.json();\n};\n","import { request } from './api';\n\nexport const loadComments = (postId: number): Promise<Comment[]> => {\n  return request(`comments?postId=${postId}`);\n};\n\nexport const removeComment = (id: number): Promise<Comment> => {\n  return request(`comments/${id}`, { method: 'DELETE' });\n};\n\nexport const addComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n): Promise<Comment> => {\n  return request('comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n};\n","import { request } from './api';\n\nexport const loadPosts = (): Promise<Post[]> => {\n  return request('posts');\n};\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  return request(`posts?userId=${userId}`);\n};\n\nexport const loadPost = (postId: number): Promise<Post> => {\n  return request(`posts/${postId}`);\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  createComment: (\n    name: string,\n    email: string,\n    body: string,\n  ) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ createComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        onClick={(event) => {\n          event.preventDefault();\n          createComment(name, email, body);\n        }}\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { addComment, loadComments, removeComment } from '../../api/comments';\nimport { loadPost } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [comments, setComments] = useState<Comment[] | []>([]);\n  const [post, setPost] = useState<Post | null>(null);\n  const [isComments, setIsComments] = useState(true);\n\n  const deleteComment = async (id: number) => {\n    await removeComment(id);\n    const commentsFromServer = await loadComments(postId);\n\n    setComments(commentsFromServer);\n  };\n\n  useEffect(() => {\n    const getPostDetails = async () => {\n      const [postFromServer, commentsFromServer] = await Promise.all([\n        loadPost(postId),\n        loadComments(postId),\n      ]);\n\n      setPost(postFromServer);\n      setComments(commentsFromServer);\n    };\n\n    getPostDetails();\n  }, [postId]);\n\n  const addNewComment = async (\n    name: string,\n    email: string,\n    body: string,\n  ) => {\n    await addComment(postId, name, email, body);\n    const commentsFromServer = await loadComments(postId);\n\n    setComments(commentsFromServer);\n  };\n\n  const buttonName = isComments\n    ? 'Hide'\n    : 'Show';\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setIsComments(!isComments)}\n        >\n          {`${buttonName} ${comments.length} comments`}\n        </button>\n\n        {isComments && (\n          <ul\n            className=\"PostDetails__list\"\n            data-cy=\"postDetails\"\n          >\n            {comments.map(comment => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  onClick={() => deleteComment(comment.id)}\n                  className=\"PostDetails__remove-button button\"\n\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm createComment={addNewComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { loadUsers } from './api/users';\nimport { getUserPosts, loadPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[] | []>([]);\n  const [posts, setPosts] = useState<Post[] | []>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPost, setSelectedPost] = useState(0);\n\n  useEffect(() => {\n    const getUsers = async () => {\n      const usersFromServer = await loadUsers();\n\n      setUsers(usersFromServer);\n    };\n\n    getUsers();\n  }, []);\n\n  useEffect(() => {\n    const loadUserPosts = async () => {\n      const userPostsFromServer = (selectedUserId === 0)\n        ? await loadPosts()\n        : await getUserPosts(selectedUserId);\n\n      setPosts(userPostsFromServer);\n    };\n\n    loadUserPosts();\n  }, [selectedUserId]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const getPostId = (postId: number) => {\n    setSelectedPost(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            {users.map((user) => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            getPost={getPostId}\n            selectedPost={selectedPost}\n          />\n        </div>\n\n        {!!selectedPost && (\n          <div className=\"App__content\">\n            <PostDetails postId={selectedPost} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const loadUsers = (): Promise<User[]> => {\n  return request('users');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}